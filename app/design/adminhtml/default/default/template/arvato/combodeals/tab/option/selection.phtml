<?php
/**
 * ComboDeals product selection template
 * 
 * @category    Arvato
 * @package     Arvato_ComboDeals
 * @copyright   Copyright (c) arvato 2015
 */
/** @var Arvato_ComboDeals_Block_Adminhtml_ComboDeals_Option_Selection $this */
?>

<script type="text/javascript">
//<![CDATA[

var bundleTemplateBox = '<table class="border" cellpadding="0" cellspacing="0">' +
    '    <thead>' +
    '        <tr class="headings">' +
    '            <th><?php echo Mage::helper('catalog')->__('Image') ?></th>' +
    '            <th><?php echo Mage::helper('catalog')->__('Name') ?></th>' +    
    '            <th><?php echo Mage::helper('catalog')->__('Original Price') ?></th>' +
    '            <th><?php echo Mage::helper('catalog')->__('Available Quantity') ?></th>' +
    '            <th class="type-order"><?php echo Mage::helper('combodeals')->__('Discount Type') ?></th>' +
    '            <th class="type-order"><?php echo Mage::helper('combodeals')->__('Discount Amount') ?></th>' +
     '            <th class="type-order"><?php echo Mage::helper('combodeals')->__('Minimum Quantity') ?></th>' +
    '            <th class="type-order"><?php echo Mage::helper('combodeals')->__('Position') ?></th>' +
    '            <th class="last">&nbsp;</th>' +
    '        </tr>' +
    '    </thead> ' +
    '    <tbody>' +
    '    </tbody>' +
    '</table>';

var bundleTemplateRow = '<td>{{image}}</td>' +
                '<td>' +
                '    <input type="hidden" id="<?php echo $this->getFieldId() ?>_id_{{index}}" name="<?php echo $this->getFieldName() ?>[{{parentIndex}}][{{index}}][selection_id]" value="{{selection_id}}">' +
                '    <input type="hidden" name="<?php echo $this->getFieldName() ?>[{{parentIndex}}][{{index}}][option_id]" value="{{option_id}}">' +
                '    <input type="hidden" class="product" name="<?php echo $this->getFieldName() ?>[{{parentIndex}}][{{index}}][product_id]" value="{{product_id}}">' +
                '    <input type="hidden" class="product" name="<?php echo $this->getFieldName() ?>[{{parentIndex}}][{{index}}][sku]" value="{{sku}}">' +
                '    <input type="hidden" name="<?php echo $this->getFieldName() ?>[{{parentIndex}}][{{index}}][delete]" value="" class="delete">' +
                '    {{name}}<br />' +
                '    <div  class="nobr">' +
                '        <strong><?php echo $this->helper('sales')->__('SKU') ?>:</strong> {{sku}}' +
                '    </div>' +
                '</td>' +
                '<td><strong>{{price}}</strong></td>' +
                '<td><strong>{{qty}}</strong></td>' +
                '<td><?php echo $this->getDiscountTypeSelectHtml() ?></td>' +
                '<td><input class="input-text required-entry validate-zero-or-greater" id="<?php echo $this->getFieldId() ?>_{{parentIndex}}_{{index}}_discount_amount" type="text" name="<?php echo $this->getFieldName() ?>[{{parentIndex}}][{{index}}][discount_amount]" value="{{discount_amount}}"></td>' +
                '<td><input class="input-text required-entry validate-greater-than-zero validate-digits-range digits-range-1-{{qty}}" type="text" name="<?php echo $this->getFieldName() ?>[{{parentIndex}}][{{index}}][minimum_qty]" value="{{minimum_qty}}"></td>' +
                '<td><input class="input-text required-entry validate-greater-than-zero" type="text" name="<?php echo $this->getFieldName() ?>[{{parentIndex}}][{{index}}][position]" value="{{position}}"></td>' +
                '<td class="last"><span title="Delete Row"><?php echo $this->getSelectionDeleteButtonHtml() ?></span></td>';

Combodeals.Selection = Class.create();
Combodeals.Selection.prototype = {
    idLabel : '<?php echo $this->getFieldId() ?>',
    templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
    templateBox : '',
    templateRow : '',
    itemsCount : 0,
    row : null,
    gridSelection : new Hash(),

    initialize : function() {
        this.templateBox = '<div class="grid tier form-list" id="' + this.idLabel + '_box_{{parentIndex}}">' + bundleTemplateBox +
                                '<input type="hidden" id="<?php echo $this->getFieldId() ?>_validation_{{parentIndex}}" class="<?php echo Arvato_ComboDeals_Helper_Data::VALIDATION_CLASS_HAS_TWO_PRODUCTS; ?>">' +
                            '</div>';

        this.templateRow = '<tr class="selection" id="' + this.idLabel + '_row_{{index}}">' + bundleTemplateRow + '</tr>';
    },

    showSearch : function(event) {
        var element = Event.findElement(event, 'div');
        var parts = element.id.split('_');

        var products = new Array();

        var inputs = $A($$('#' + element.id + ' tr.selection input.product'));
        for (i=0; i<inputs.length; i++) {
            products.push(inputs[i].value);
        }

        this.gridSelection.set(parts[2], $H({}));

        new Ajax.Updater(cdOption.idLabel + '_search_' + parts[2], '<?php echo $this->getSelectionSearchUrl() ?>', {
            method: 'post',
            parameters : {'index' : parts[2], 'products[]' : products, 'form_key': FORM_KEY},
            evalScripts : true
        });

        if (Event.element(event).tagName.toLowerCase() != 'button') {
            var button = Event.element(event).up('button');
        } else {
            var button = Event.element(event);
        }
        button.hide();
    },

    addRow : function (parentIndex, data) {

        var box = null;
        if (!(box = $(this.idLabel + '_box_' + parentIndex))) {
            this.addBox(parentIndex);
            box = $(this.idLabel + '_box_' + parentIndex);
        } else {
            box.show();
        }

        var option_type = $(cdOption.idLabel + '_' + parentIndex + '_discount_type');

        if(!data){
            var data = {};
        }

        data.index = this.itemsCount++;
        data.parentIndex = parentIndex;


        this.template = new Template(this.templateRow, this.templateSyntax);
        var tbody = $$('#' + this.idLabel + '_box_' + parentIndex + ' tbody');

        Element.insert(tbody[0], {'bottom':this.template.evaluate(data)});

        // set by default value '0' to discount_amount field and disable it
        $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').disable();
        $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').writeAttribute("value", "0");

        //set selected discount type and relative css class
        if (data.discount_type) {
            $A($(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_type').options).each(function(selection){
                if (selection.value==data.discount_type)
                {
                    selection.selected = true;
                }
            });

            if(data.discount_type == 'percent') {
                $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').addClassName('validate-digits-range digits-range-1-100');
                $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').writeAttribute("value", data.discount_amount);
                $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').enable();
            }

            if(data.discount_type == 'fixed') {
                $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').addClassName('validate-number-range number-range-0.1-' + data.price.replace(/\D*/, ""));
                $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').writeAttribute("value", data.discount_amount);
                $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').enable();
            }

            if(data.discount_type == 'none' || data.discount_type == 'free') {
                $(this.idLabel + '_' + parentIndex +'_'+ data.index +'_discount_amount').disable();
            }
        }
    },

    addBox : function (parentIndex) {
        var div = $(cdOption.idLabel + '_' + parentIndex)
        this.template = new Template(this.templateBox, this.templateSyntax);
        var data = {'parentIndex' : parentIndex};
        Element.insert(div, {'bottom':this.template.evaluate(data)});
    },

    remove : function(event) {
        var element = Event.findElement(event, 'tr');
        var container = Event.findElement(event, 'div');

        if (element) {
            Element.select(element, '.delete').each(function(elem){elem.value='1'});
            Element.select(element, ['input', 'select']).each(function(elem){elem.hide()});
            Element.removeClassName(element, 'selection');
            Element.hide(element);

            if (container) {
                if ($$('#' + container.id + ' tr.selection')) {
                    if (!$$('#' + container.id + ' tr.selection').length) {
                        container.hide();
                    }
                }
            }
        }
    },

    checkGroup : function(event) {
        var element = Event.element(event);
        if (element.type == 'radio') {
            var box = element.up('div');

            var inputs = $$('div#' + box.id + ' input.default');
            if (inputs) {
                for (i=0; i< inputs.length; i++) {
                    if (inputs[i].name != element.name) {
                        inputs[i].checked = false;
                    }
                }
            }
        }
    },

    productGridAddSelected : function(event) {
        var element = Event.findElement(event, 'button');
        var parts = element.id.split('_');

        $(cdOption.idLabel + '_search_' + parts[2]).innerHTML = '';
        $(cdOption.idLabel + '_' + parts[2] + '_add_button').show();

        this.gridSelection.get(parts[2]).each(
            function(pair) {
                var qty = pair.value.get('qty');
                var data = {
                    'name' : pair.value.get('name'),
                    'sku' : pair.value.get('sku'),
                    'price' : pair.value.get('price'),
                    'qty' : pair.value.get('qty'),
                    'image' : pair.value.get('image'),
                    'position' : 1,
                    'product_id' : pair.key,
                    'option_id' : $(cdOption.idLabel + '_id_' + parts[2]).value
                };
                comboDealSelection.addRow(parts[2], data);
            }
        );
    },

    productGridRowInit : function(grid, row){
        var checkbox = $(row).getElementsByClassName('checkbox')[0];
        var inputs = $(row).getElementsByClassName('input-text');
        for (var i = 0; i < inputs.length; i++) {
            inputs[i].checkbox = checkbox;
            Event.observe(inputs[i], 'keyup', this.productGridRowInputChange.bind(this));
            Event.observe(inputs[i], 'change', this.productGridRowInputChange.bind(this));
        }
    },

    productGridCheckboxCheck : function(grid, element, checked) {
        var id = element.up('table').id.split('_')[4];
        if (element.value > 0) {
            if (element.checked) {
                var tr = element.parentNode.parentNode;
                if (!this.gridSelection.get(id)) {
                    this.gridSelection.set(id, new Hash());
                }
                this.gridSelection.get(id).set(element.value, $H({}));
                // Firefox returns weird line breaks and long empty spaces before and after the content
                // So we need to filter this
                var name = tr.select('td.name')[0].innerHTML.stripTags().stripScripts().unescapeHTML().replace(/[\n\r]+/g, ' ').replace(/\s{2,}/g, '');
                var sku = tr.select('td.sku')[0].innerHTML.stripTags().stripScripts().unescapeHTML().replace(/[\n\r]+/g, ' ').replace(/\s{2,}/g, '');
                var price = tr.select('td.price')[0].innerHTML.stripTags().stripScripts().unescapeHTML().replace(/[\n\r]+/g, ' ').replace(/\s{2,}/g, '');
                var qty = tr.select('td.qty')[0].innerHTML.stripTags().stripScripts().unescapeHTML().replace(/[\n\r]+/g, ' ').replace(/\s{2,}/g, '');
                var image = tr.select('td.image')[0].innerHTML;
                this.gridSelection.get(id).get(element.value).set('name', name);
                this.gridSelection.get(id).get(element.value).set('sku', sku);
                this.gridSelection.get(id).get(element.value).set('price', price);
                this.gridSelection.get(id).get(element.value).set('qty', qty);
                this.gridSelection.get(id).get(element.value).set('image', image);
            } else {
                this.gridSelection.get(id).unset(element.value);
            }
        }
    },

    productGridRowClick : function(grid, event) {
        var trElement = Event.findElement(event, 'tr');
        var isInput = Event.element(event).tagName == 'INPUT';
        if (trElement) {
            var checkbox = Element.select(trElement, 'input');
            if (checkbox[0]) {
                var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;
                grid.setCheckboxChecked(checkbox[0], checked);
            }
        }
    },

    productGridRowInputChange : function(event) {
        var element = Event.element(event);
        if (!element.checkbox.checked) {
            return;
        }
        var id = element.up('table').id.split('_')[4];
        this.gridSelection.get(id).get(element.checkbox.value).set('qty', element.value);
    },
    
    addPriceRangeClass : function(event) {
        var element = Event.element(event);
        var discountValueElement = element.up("td").next().down();
        var originalPrice = element.up("td").previous(1).down().innerHTML;

        if (element.value == 'none' || element.value == 'free') {
            discountValueElement.writeAttribute("value", "0");
            discountValueElement.value = 0;
            discountValueElement.removeClassName('validate-digits-range');
            discountValueElement.removeClassName('digits-range-1-100');
            discountValueElement.removeClassName('validate-number-range');
            discountValueElement.removeClassName('number-range-0.1-' + originalPrice.replace(/\D*/, ""));
            discountValueElement.disable();
        }

        if (element.value == 'percent') {
            discountValueElement.removeClassName('validate-number-range');
            discountValueElement.removeClassName('number-range-0.1-' + originalPrice.replace(/\D*/, ""));
            discountValueElement.addClassName('validate-digits-range digits-range-1-100');
            discountValueElement.enable();
        }

        if (element.value == 'fixed') {
            discountValueElement.removeClassName('validate-digits-range');
            discountValueElement.removeClassName('digits-range-1-100');
            discountValueElement.addClassName('validate-number-range number-range-0.1-' + originalPrice.replace(/\D*/, ""));
            discountValueElement.enable();
        }
    }
}

comboDealSelection = new Combodeals.Selection();
//]]>
</script>